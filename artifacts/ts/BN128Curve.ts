/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as BN128CurveContractJson } from "../BN128Curve.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Point, AllStructs } from "./types";

// Custom types for the contract
export namespace BN128CurveTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    add: {
      params: CallContractParams<{ p1: Point; p2: Point }>;
      result: CallContractResult<Point>;
    };
    double: {
      params: CallContractParams<{ pt: Point }>;
      result: CallContractResult<Point>;
    };
    multiply: {
      params: CallContractParams<{ pt: Point; n: bigint }>;
      result: CallContractResult<Point>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<BN128CurveInstance, {}> {
  consts = {
    P: BigInt(
      21888242871839275222246405745257275088696311157297823662689037894645226208583
    ),
    Error: { Infinity: BigInt(0) },
  };

  at(address: string): BN128CurveInstance {
    return new BN128CurveInstance(address);
  }

  tests = {
    add: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { p1: Point; p2: Point }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<Point>> => {
      return testMethod(this, "add", params);
    },
    double: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { pt: Point }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<Point>> => {
      return testMethod(this, "double", params);
    },
    multiply: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { pt: Point; n: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<Point>> => {
      return testMethod(this, "multiply", params);
    },
    isEqual: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { a: Point; b: Point }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "isEqual", params);
    },
    infPoint: async (
      params?: Omit<
        TestContractParamsWithoutMaps<never, never>,
        "testArgs" | "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<Point>> => {
      return testMethod(this, "infPoint", params === undefined ? {} : params);
    },
    fieldInv: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { a: bigint; mod: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "fieldInv", params);
    },
  };
}

// Use this object to test and deploy the contract
export const BN128Curve = new Factory(
  Contract.fromJson(
    BN128CurveContractJson,
    "",
    "7d67caed6c7e1f5660c3a9ab726ed902716e6fd34623fc0fbc728739cb3dc755",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class BN128CurveInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<BN128CurveTypes.State> {
    return fetchContractState(BN128Curve, this);
  }

  methods = {
    add: async (
      params: BN128CurveTypes.CallMethodParams<"add">
    ): Promise<BN128CurveTypes.CallMethodResult<"add">> => {
      return callMethod(BN128Curve, this, "add", params, getContractByCodeHash);
    },
    double: async (
      params: BN128CurveTypes.CallMethodParams<"double">
    ): Promise<BN128CurveTypes.CallMethodResult<"double">> => {
      return callMethod(
        BN128Curve,
        this,
        "double",
        params,
        getContractByCodeHash
      );
    },
    multiply: async (
      params: BN128CurveTypes.CallMethodParams<"multiply">
    ): Promise<BN128CurveTypes.CallMethodResult<"multiply">> => {
      return callMethod(
        BN128Curve,
        this,
        "multiply",
        params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends BN128CurveTypes.MultiCallParams>(
    calls: Calls
  ): Promise<BN128CurveTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      BN128Curve,
      this,
      calls,
      getContractByCodeHash
    )) as BN128CurveTypes.MultiCallResults<Calls>;
  }
}
